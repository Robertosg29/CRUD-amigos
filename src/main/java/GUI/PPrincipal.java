package GUI;

import data.Amigo;
import data.GestionaBDD;
import data.Pandilla;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rober
 */
public class PPrincipal extends MiPanel {

    DefaultTableModel modeloTablaAmigos = null, modeloTablaPandillas = null;
    GestionaBDD gb;
    boolean tablaAmigos = true;

    public PPrincipal(VentanaPpal v) {
        super(v);
        gb = v.getGb();
        initComponents();
        minitComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPrincipal = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        bAgregar = new javax.swing.JButton();
        bConsultar = new javax.swing.JButton();
        bModificar = new javax.swing.JButton();
        bBuscar = new javax.swing.JButton();
        bBorrar = new javax.swing.JButton();
        bAddAmigoPan = new javax.swing.JButton();
        bDeleteAmigoPandilla = new javax.swing.JButton();
        bVerPandillas = new javax.swing.JButton();
        etiquetaCabecera = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(750, 560));
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));

        tablaPrincipal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaPrincipal);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 40, 10));
        jPanel1.setLayout(new java.awt.GridLayout(8, 0, 0, 20));

        bAgregar.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bAgregar.setText("Agregar");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(bAgregar);

        bConsultar.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bConsultar.setText("Consultar");
        bConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConsultarActionPerformed(evt);
            }
        });
        jPanel1.add(bConsultar);

        bModificar.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bModificar.setText("Modificar");
        bModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bModificarActionPerformed(evt);
            }
        });
        jPanel1.add(bModificar);

        bBuscar.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bBuscar.setText("Buscar");
        bBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(bBuscar);

        bBorrar.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bBorrar.setText("Borrar");
        bBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBorrarActionPerformed(evt);
            }
        });
        jPanel1.add(bBorrar);

        bAddAmigoPan.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bAddAmigoPan.setText("<html>\nAñadir amigo<br>\n<center>a Pandilla </center>\n</html>");
        bAddAmigoPan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddAmigoPanActionPerformed(evt);
            }
        });
        jPanel1.add(bAddAmigoPan);

        bDeleteAmigoPandilla.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bDeleteAmigoPandilla.setText("<html>\nEliminar amigo<br>\n<center>de Pandilla </center>\n</html>");
        bDeleteAmigoPandilla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteAmigoPandillaActionPerformed(evt);
            }
        });
        jPanel1.add(bDeleteAmigoPandilla);

        bVerPandillas.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bVerPandillas.setText("<html>Ver Pandillas<br>\nde un Amigo\n</html>");
        bVerPandillas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerPandillasActionPerformed(evt);
            }
        });
        jPanel1.add(bVerPandillas);

        add(jPanel1, java.awt.BorderLayout.EAST);

        etiquetaCabecera.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        etiquetaCabecera.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        etiquetaCabecera.setPreferredSize(new java.awt.Dimension(200, 40));
        add(etiquetaCabecera, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void bBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBorrarActionPerformed

        if (tablaPrincipal.getSelectedRow() != -1) {

            try {
                int[] filastabla = tablaPrincipal.getSelectedRows(); //con esto estaremos guardando todas las filas seleccionadas
                //Aqui estamos creando uns segundo array para poder ordenar las filas, ya que es la forma de no sufrir errores al eliminar
                //filas ya que se alteran cada vez que borras un campo, NO RAYARSE CON ESTO
                Integer[] filasOrdenadas = new Integer[filastabla.length];
                for (int i = 0; i < filasOrdenadas.length; i++) {
                    filasOrdenadas[i] = filastabla[i];

                }
                Arrays.sort(filasOrdenadas, Collections.reverseOrder());

                if (tablaAmigos) {
                    borrarAmigos(filasOrdenadas);
                } else {
                    borrarPandillas(filasOrdenadas);
                }

            } catch (Exception ex) {
                Logger.getLogger(PPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(v, "Seleccione un registro primero");
        }

    }//GEN-LAST:event_bBorrarActionPerformed

    private void bModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bModificarActionPerformed

        if (tablaPrincipal.getSelectedRow() != -1 && tablaPrincipal.getSelectedRows().length <= 1) {
            try {
                if(tablaAmigos){
                    //aqui se modifica la tabla amigos
                     Amigo a = new Amigo((String) modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 1),
                        (String) modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 2),
                        Integer.parseInt((String) modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 3)),
                        (String) modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 4));
                        new VModificar_Amigo(this, a, Integer.parseInt((String) modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 0))).setVisible(true);

                }else{
                    //Y aqui la de pandillas
                     Pandilla p= new Pandilla((String)modeloTablaPandillas.getValueAt(tablaPrincipal.getSelectedRow(),1),
                                              (String)modeloTablaPandillas.getValueAt(tablaPrincipal.getSelectedRow(),2));
                        new VModificar_Pandilla(this, p,Integer.parseInt((String)modeloTablaPandillas.getValueAt(tablaPrincipal.getSelectedRow(),0))).setVisible(true);
                }
               
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione solo, o al menos, un registro");
        }
    }//GEN-LAST:event_bModificarActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        if (tablaAmigos) {
            new VAgregarAmigo(this).setVisible(true);
        } else {
            new VAgregarPandilla(this).setVisible(true);
        }
    }//GEN-LAST:event_bAgregarActionPerformed

    private void bConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConsultarActionPerformed
        String nombre = "";

        if (tablaAmigos) {
            nombre = "pandillas";
        } else {
            nombre = "amigos";
        }
        if (JOptionPane.showConfirmDialog(this, "¿Quieres ver la tabla " + nombre + "?", "Elige una tabla", JOptionPane.YES_NO_OPTION) == 0) {
            tablaAmigos = !tablaAmigos;
        }
        if (tablaAmigos) {
            cargarBotones();
            etiquetaCabecera.setText("Tabla Amigos");
            limpiarTabla();
            tablaPrincipal.setModel(modeloTablaAmigos);
            cargarTablaAmigos();
        } else {
            cargarBotones();
            etiquetaCabecera.setText("Tabla Pandillas");
            limpiarTabla();
            tablaPrincipal.setModel(modeloTablaPandillas);
            cargarTablaPandillas();
        }
    }//GEN-LAST:event_bConsultarActionPerformed

    private void bBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarActionPerformed
        new VBuscar(this).setVisible(true);
    }//GEN-LAST:event_bBuscarActionPerformed

    private void bAddAmigoPanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddAmigoPanActionPerformed
        int cod=0;
        String nombre="";
        if (tablaPrincipal.getSelectedRow() != -1 && tablaPrincipal.getSelectedRows().length <= 1){
             cod=Integer.parseInt((String)modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 0));
             nombre=(String)modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 1);
             new VAddODeleteAmigoAPandilla(this, cod, nombre,true).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione solo, o al menos, un registro");
        }
    }//GEN-LAST:event_bAddAmigoPanActionPerformed

    private void bVerPandillasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerPandillasActionPerformed
        String cad="Las pandillas de ",nombre="";
        int cod=0,cont=0;
        ResultSet rs=null;
        if (tablaPrincipal.getSelectedRow() != -1 && tablaPrincipal.getSelectedRows().length <= 1) {
            try {
                cod=Integer.parseInt((String)modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 0));
                nombre=(String)modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 1);
                cad+=nombre+" son:\n";
                
                rs=gb.pandillasDeUnAmigo(cod);
                while(rs.next()){
                    cont++;
                    cad+="   -"+rs.getString(1)+"\n";
                }
                if(cont==0){
                    JOptionPane.showMessageDialog(this, "El amigo "+nombre+" no pertenece a ninguna pandilla.");
                }else{
                    JOptionPane.showMessageDialog(this, cad);
                }
            } catch (SQLException ex) {
                Logger.getLogger(PPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(this,"Seleccione solo, o al menos, un registro");
        }
    }//GEN-LAST:event_bVerPandillasActionPerformed

    private void bDeleteAmigoPandillaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteAmigoPandillaActionPerformed
        int cod=0;
        String nombre="";
        ResultSet rs=null;
        if (tablaPrincipal.getSelectedRow() != -1 && tablaPrincipal.getSelectedRows().length <= 1){
            try {
                cod=Integer.parseInt((String)modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 0));
                nombre=(String)modeloTablaAmigos.getValueAt(tablaPrincipal.getSelectedRow(), 1);
                rs=gb.pandillasDeUnAmigo(cod);
                if(rs.next()){
                   new VAddODeleteAmigoAPandilla(this, cod, nombre,false).setVisible(true); 
                }else{
                    JOptionPane.showMessageDialog(this,"Este amigo no tiene pandilla");
                }
            } catch (SQLException ex) {
                Logger.getLogger(PPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione solo, o al menos, un registro");
        }
    }//GEN-LAST:event_bDeleteAmigoPandillaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAddAmigoPan;
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bBorrar;
    private javax.swing.JButton bBuscar;
    private javax.swing.JButton bConsultar;
    private javax.swing.JButton bDeleteAmigoPandilla;
    private javax.swing.JButton bModificar;
    private javax.swing.JButton bVerPandillas;
    private javax.swing.JLabel etiquetaCabecera;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaPrincipal;
    // End of variables declaration//GEN-END:variables
    public void cargarBotones(){
        if(tablaAmigos){
            bAgregar.setText("<html>Agregar<br>" +
                             "<center>Amigo</center>" +
                             "</html>");
            bConsultar.setText("<html>Consultar<br>" +
                             "<center>Pandillas</center>" +
                             "</html>");
            bModificar.setText("<html>Modificar<br>" +
                             "<center>Amigo</center>" +
                             "</html>");
            bBorrar.setText("<html>Borrar<br>" +
                             "<center>Amigo</center>" +
                             "</html>");
            bVerPandillas.setVisible(true);
            bVerPandillas.setEnabled(true);
            bAddAmigoPan.setVisible(true);
            bAddAmigoPan.setEnabled(true);
            bDeleteAmigoPandilla.setVisible(true);
            bDeleteAmigoPandilla.setEnabled(true);
        }else{
            bAgregar.setText("<html>Agregar<br>" +
                             "<center>Pandilla</center>" +
                             "</html>");
            bConsultar.setText("<html>Consultar<br>" +
                             "<center>Amigos</center>" +
                             "</html>");
            bModificar.setText("<html>Modificar<br>" +
                             "<center>Pandilla</center>" +
                             "</html>");
            bBorrar.setText("<html>Borrar<br>" +
                             "<center>Pandilla</center>" +
                             "</html>");
            bVerPandillas.setVisible(false);
            bVerPandillas.setEnabled(false);
            bAddAmigoPan.setVisible(false);
            bAddAmigoPan.setEnabled(false);
            bDeleteAmigoPandilla.setVisible(false);
            bDeleteAmigoPandilla.setEnabled(false);
        }
    }
    private void minitComponents() {
        //Meto cabecera
        cargarBotones();
        etiquetaCabecera.setText("Tabla Amigos");
        String[] columnasTablaAmigos = {"ID Amigo", "Nombre", "Direccion", "Telefono", "Aficiones"};
        String[] columnasTablaPandillas = {"ID Pandilla", "Nombre", "Lugar Vacaciones"};
        modeloTablaAmigos = new DefaultTableModel(columnasTablaAmigos, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        modeloTablaPandillas = new DefaultTableModel(columnasTablaPandillas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablaPrincipal.setModel(modeloTablaAmigos);
        cargarTablaAmigos();
    }

    public void cargarTablaAmigos() {

        try {
            ResultSet rs = gb.consultarAmigos();
            while (rs.next()) {
                String[] filaTabla = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)};
                modeloTablaAmigos.addRow(filaTabla);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void cargarTablaPandillas() {
        try {
            ResultSet rs = gb.consultarPandillas();
            while (rs.next()) {
                String[] filaTabla = {rs.getString(1), rs.getString(2), rs.getString(3)};
                modeloTablaPandillas.addRow(filaTabla);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void limpiarTabla() {
        try {
            DefaultTableModel modelo = (DefaultTableModel) tablaPrincipal.getModel();
            int filas = tablaPrincipal.getRowCount();
            for (int i = 0; i < filas; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
    }

    public DefaultTableModel getModeloTablaAmigos() {
        return modeloTablaAmigos;
    }

    public DefaultTableModel getModeloTablaPandillas() {
        return modeloTablaPandillas;
    }
    

    public JTable getTablaPrincipal() {
        return tablaPrincipal;
    }

    public GestionaBDD getGb() {
        return gb;
    }

    public JLabel getEtiquetaCabecera() {
        return etiquetaCabecera;
    }

    public JButton getbAddAmigoPan() {
        return bAddAmigoPan;
    }

    public JButton getbDeleteAmigoPandilla() {
        return bDeleteAmigoPandilla;
    }

    public JButton getbVerPandillas() {
        return bVerPandillas;
    }
    

    private void borrarAmigos(Integer[] filasOrdenadas) {

        int codigo = 0;
        String nombre;

        for (int i = 0; i < filasOrdenadas.length; i++) {
            //Necesitamos sacar del modelo los valores para pasarselo al metodo borrarAmigo
            codigo = (int) Integer.parseInt((String) modeloTablaAmigos.getValueAt(filasOrdenadas[i], 0));
            nombre = (String) modeloTablaAmigos.getValueAt(filasOrdenadas[i], 1);
            if (JOptionPane.showConfirmDialog(v, "¿Estás seguro que deseas eliminar de forma permanente a " + nombre + "?", "Borrar amigos", JOptionPane.YES_NO_OPTION) == 0) {

                try {
                    gb.borrarAmigo(codigo);
                     
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
                JOptionPane.showMessageDialog(v, "Has eliminado a " + nombre);
            }

        }
        limpiarTabla();
        cargarTablaAmigos();
        getEtiquetaCabecera().setText("Tabla Amigos");
    }

    private void borrarPandillas(Integer[] filasOrdenadas) {
        int codigo = 0;
        String nombre;

        for (int i = 0; i < filasOrdenadas.length; i++) {
            //Necesitamos sacar del modelo los valores para pasarselo al metodo borrarPandilla
            codigo = (int) Integer.parseInt((String) modeloTablaPandillas.getValueAt(filasOrdenadas[i], 0));
            nombre = (String) modeloTablaPandillas.getValueAt(filasOrdenadas[i], 1);
            if (JOptionPane.showConfirmDialog(v, "¿Estás seguro que deseas eliminar de forma permanente a la pandilla " + nombre + "?", "Borrar Pandillas", JOptionPane.YES_NO_OPTION) == 0) {

                try {
                    gb.borrarPandilla(codigo);
                     
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
                JOptionPane.showMessageDialog(v, "Has eliminado la pandilla " + nombre);
            }

        }
        limpiarTabla();
        cargarTablaPandillas();
        getEtiquetaCabecera().setText("Tabla Pandillas");
    }
}
